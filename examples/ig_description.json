{
  "initialPromptTemplate": "You are a social media expert. Write a description for A video about '${topic}'.\n\nContext for the video:\n${context}",
  "variables": [
    {
      "name": "context",
      "description": "The full context to use to build the social optimized description",
      "example": "Under the hood, Docker is not a lightweight virtual machine—it’s a sophisticated user-space tool that leans entirely on the Linux kernel to provide efficiency, isolation, and portability. Here's a breakdown: 🛠️ 1. Docker Engine: Client, Daemon & Runtime The Docker client (docker CLI) sends API requests to the Docker daemon (dockerd). The Docker daemon handles commands like building images, starting containers, and managing networks and volumes. It delegates container lifecycle management to containerd, a container runtime. containerd uses runc, a low-level runtime that creates and runs containers using Linux kernel features. 🌐 2. OS-Level Virtualization — No Hypervisor Needed on Linux Docker doesn't emulate hardware or run virtual machines. Instead, it uses features built into the Linux kernel: Namespaces isolate resources like process IDs (PID), network interfaces, mount points, users, IPC, and hostname. Each container gets its own isolated set. Control groups (cgroups) allow Docker to limit and monitor the CPU, memory, and I/O usage of containers. These mechanisms provide lightweight isolation, allowing containers to behave like separate systems while actually being regular processes on the host OS. 🏗️ 3. Union (Overlay) File System Docker uses a layered filesystem to manage images and containers efficiently: Docker images are made up of read-only layers stacked on top of each other. When a container starts, a thin, writable layer is added on top. This overlay filesystem creates a unified view, where changes made by the container only affect its top layer, preserving the underlying image. 🔁 4. How a Container Actually Starts Here’s a simplified version of what happens when Docker runs a container: Docker daemon receives the command. It uses containerd and runc to: Create namespaces for isolation, Apply cgroup constraints, Mount the container’s root filesystem using OverlayFS, Set up the virtual network interface and bridge, Fork and execute the container’s main process. This process behaves like any other Linux process, but within a constrained and isolated environment. 🌍 5. On Non‑Linux Hosts (macOS, Windows) Since Docker relies on Linux kernel features, it cannot run natively on macOS or Windows. Instead: Docker spins up a small virtual machine running Linux behind the scenes. The Docker CLI communicates with this Linux VM transparently. To the user, it still feels like native Docker, but it's running inside a VM. 🔒 6. Security & Isolation Layers Beyond namespaces and cgroups, Docker uses additional layers of security: Linux capabilities: reduce the set of privileges available to container processes. AppArmor or SELinux profiles: restrict what containers can access on the system. Seccomp filters: restrict the system calls a container can make. These mechanisms help prevent containers from escaping their sandbox or accessing unauthorized resources."
    },
    {
      "name": "topic",
      "description": "The main topic the video is about",
      "example": "How does Docker works under the hoods?"
    }
  ],
  "idealOutput": "🐳 Docker isn't a tiny VM—it's Linux wizardry at work.\nNo emulators, no hypervisors—just namespaces, cgroups, and containers running like real processes. Here's how:\n\n🛠️ Docker CLI → Daemon → containerd → runc\n📦 Containers = Isolated Linux processes\n🧱 Images = Layered filesystems (OverlayFS)\n🚀 Starts in milliseconds, no full OS boot\n🖥️ On macOS/Windows? It runs inside a tiny Linux VM.\n🔐 Add security: seccomp, AppArmor, SELinux, capabilities.\n\nDocker is fast, secure, and closer to the metal than you think.\n👉 Swipe to dive deeper into the stack!\n\n#Docker #Linux #Containers #DevOps #CloudNative #DockerUnderTheHood #runc #containerd #OverlayFS #Infrastructure",
  "model": "gpt-4o-mini",
  "maxIterations": 2,
  "telemetry": {
    "filePath": "telemetry-ig_description_2.html",
    "reporterType": "html"
  }
}
